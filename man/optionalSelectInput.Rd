% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optionalInput.R
\name{optionalSelectInput}
\alias{optionalSelectInput}
\title{Hide, Show Label only or display a \code{pickerInput}}
\usage{
optionalSelectInput(
  inputId,
  label = NULL,
  choices = NULL,
  selected = NULL,
  multiple = FALSE,
  sep = NULL,
  options = list(),
  label_help = NULL,
  fixed = FALSE,
  width = NULL
)
}
\arguments{
\item{inputId}{The \code{input} slot that will be used to access the value.}

\item{label}{Display label for the control, or \code{NULL} for no label.}

\item{choices}{(\code{character}, \code{NULL})\cr
If \code{choices} is \code{NULL} no \code{pickerInput} widget is displayed and \code{input[[inputId]]}
will be \code{""}. If \code{choices} is of length 1 then a label and character string will be
displayed and the \code{pickerInput} widget will be hidden. If the length of \code{choices}
is more than one the \code{pickerInput} element will be displayed.
If elements of the list are named then that name rather than the value
is displayed to the user.}

\item{selected}{The initially selected value (or multiple values if \code{multiple = TRUE}).
If not specified then defaults to the first value for single-select lists
and no values for multiple select lists.}

\item{multiple}{Is selection of multiple items allowed?}

\item{sep}{(\code{character(1)})\cr
A separator string to split the \code{choices} or \code{selected} inputs into the values of the different
columns.}

\item{options}{List of options, see \link[shinyWidgets]{pickerOptions} for all available options.
To limit the number of selection possible, see example below.}

\item{label_help}{(\code{shiny.tag} optional)\cr
e.g. an object returned by \code{\link[shiny:helpText]{shiny::helpText()}}.}

\item{fixed}{(\code{logical(1)} optional)\cr
whether to block user to select choices.}

\item{width}{(\code{character(1)})\cr
The width of the input passed to \code{pickerInput}  e.g. \code{'auto'}, \code{'fit'}, \code{'100px'} or \code{'75\%'}}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
Hidden input widgets are useful to have the \code{input[[inputId]]} variable
on available in the server function but no corresponding visual clutter from
input widgets that provide only a single choice.
}
\examples{
\dontrun{
optionalSelectInput(inputId = "xvar", label = "x variable", choices = "A", selected = "A")
optionalSelectInput(
  inputId = "xvar",
  label = "x variable",
  choices = LETTERS[1:5],
  selected = "A"
)
optionalSelectInput(
  inputId = "xvar",
  label = "x variable",
  choices = c("A - value A" = "A"),
  selected = "A"
)


# Create a minimal example data frame
data <- data.frame(
  AGE = c(25, 30, 40, 35, 28),
  SEX = c("Male", "Female", "Male", "Female", "Male"),
  PARAMCD = c("Val1", "Val2", "Val3", "Val4", "Val5"),
  PARAM = c("Param1", "Param2", "Param3", "Param4", "Param5"),
  AVISIT = c("Visit1", "Visit2", "Visit3", "Visit4", "Visit5"),
  stringsAsFactors = TRUE
)
optionalSelectInput(
  inputId = "xvar",
  label = "x variable",
  choices = teal.transform::variable_choices(data = data, subset = c("AGE", "SEX", "PARAMCD")),
  selected = "PARAMCD"
)

selected_value <- paste0(lapply(data[1, c("PARAMCD", "AVISIT")], as.character), collapse = " - ")
optionalSelectInput(
  inputId = "xvar",
  label = "x variable",
  choices = teal.transform::value_choices(
    data = data,
    var_choices = c("PARAMCD", "AVISIT"),
    var_label = c("PARAM", "AVISIT")
  ),
  selected = selected_value
)
}
}
